#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	
	pushl %ebp			# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi			#Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx		# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
Start:
	iaddl $-16,%edx
	andl %edx,%edx		# len >=0?
	jge Loop			# if so, goto loop
	addl %edx,%edx
	addl %edx,%edx
	mrmovl End_jump_table(%edx),%edx
	pushl %edx
	ret

Jump_table:
	.long Done
	.long x0
	.long x1
	.long x2
	.long x3
	.long x4
	.long x5
	.long x6
	.long x7
	.long x8
	.long x9
	.long x10
	.long x11
	.long x12
	.long x13
	.long x14
End_jump_table:
	.long x15

x15:
	mrmovl 60(%ebx),%edi
	rmmovl %edi,60(%ecx)
	andl %edi,%edi
	jle x14
	iaddl $1,%eax

x14:
	mrmovl 56(%ebx),%edi
	rmmovl %edi,56(%ecx)
	andl %edi,%edi
	jle x13
	iaddl $1,%eax

x13:
	mrmovl 52(%ebx),%edi
	rmmovl %edi,52(%ecx)
	andl %edi,%edi
	jle x12
	iaddl $1,%eax
	
x12:
	mrmovl 48(%ebx),%edi
	rmmovl %edi,48(%ecx)
	andl %edi,%edi
	jle x11
	iaddl $1,%eax

x11:
	mrmovl 44(%ebx),%edi
	rmmovl %edi,44(%ecx)
	andl %edi,%edi
	jle x10
	iaddl $1,%eax

x10:
	mrmovl 40(%ebx),%edi
	rmmovl %edi,40(%ecx)
	andl %edi,%edi
	jle x9
	iaddl $1,%eax

x9:
	mrmovl 36(%ebx),%edi
	rmmovl %edi,36(%ecx)
	andl %edi,%edi
	jle x8
	iaddl $1,%eax

x8:
	mrmovl 32(%ebx),%edi
	rmmovl %edi,32(%ecx)
	andl %edi,%edi
	jle x7
	iaddl $1,%eax

x7:
	mrmovl 28(%ebx),%edi
	rmmovl %edi,28(%ecx)
	andl %edi,%edi
	jle x6
	iaddl $1,%eax

x6:
	mrmovl 24(%ebx),%edi
	rmmovl %edi,24(%ecx)
	andl %edi,%edi
	jle x5
	iaddl $1,%eax
	

x5:
	mrmovl 20(%ebx),%edi
	rmmovl %edi,20(%ecx)
	andl %edi,%edi
	jle x4
	iaddl $1,%eax
	

x4:
	mrmovl 16(%ebx),%edi
	rmmovl %edi,16(%ecx)
	andl %edi,%edi
	jle x3
	iaddl $1,%eax
	
x3:
	mrmovl 12(%ebx),%edi
	rmmovl %edi,12(%ecx)
	andl %edi,%edi
	jle x2
	iaddl $1,%eax
	
x2:
	mrmovl 8(%ebx),%edi
	rmmovl %edi,8(%ecx)
	andl %edi,%edi
	jle x1
	iaddl $1,%eax
	
x1:
	mrmovl 4(%ebx),%edi
	rmmovl %edi,4(%ecx)
	andl %edi,%edi
	jle x0
	iaddl $1,%eax

x0:
	mrmovl (%ebx),%edi
	rmmovl %edi,(%ecx)
	andl %edi,%edi
	jle Done
	iaddl $1,%eax

End_jump:
	jmp Done

Loop:
l15:
	mrmovl 60(%ebx),%edi
	rmmovl %edi,60(%ecx)
	andl %edi,%edi
	jle l14
	iaddl $1,%eax

l14:
	mrmovl 56(%ebx),%edi
	rmmovl %edi,56(%ecx)
	andl %edi,%edi
	jle l13
	iaddl $1,%eax

l13:
	mrmovl 52(%ebx),%edi
	rmmovl %edi,52(%ecx)
	andl %edi,%edi
	jle l12
	iaddl $1,%eax
	
l12:
	mrmovl 48(%ebx),%edi
	rmmovl %edi,48(%ecx)
	andl %edi,%edi
	jle l11
	iaddl $1,%eax

l11:
	mrmovl 44(%ebx),%edi
	rmmovl %edi,44(%ecx)
	andl %edi,%edi
	jle l10
	iaddl $1,%eax

l10:
	mrmovl 40(%ebx),%edi
	rmmovl %edi,40(%ecx)
	andl %edi,%edi
	jle l9
	iaddl $1,%eax

l9:
	mrmovl 36(%ebx),%edi
	rmmovl %edi,36(%ecx)
	andl %edi,%edi
	jle l8
	iaddl $1,%eax

l8:
	mrmovl 32(%ebx),%edi
	rmmovl %edi,32(%ecx)
	andl %edi,%edi
	jle l7
	iaddl $1,%eax

l7:
	mrmovl 28(%ebx),%edi
	rmmovl %edi,28(%ecx)
	andl %edi,%edi
	jle l6
	iaddl $1,%eax

l6:
	mrmovl 24(%ebx),%edi
	rmmovl %edi,24(%ecx)
	andl %edi,%edi
	jle l5
	iaddl $1,%eax
	

l5:
	mrmovl 20(%ebx),%edi
	rmmovl %edi,20(%ecx)
	andl %edi,%edi
	jle l4
	iaddl $1,%eax
	

l4:
	mrmovl 16(%ebx),%edi
	rmmovl %edi,16(%ecx)
	andl %edi,%edi
	jle l3
	iaddl $1,%eax
	
l3:
	mrmovl 12(%ebx),%edi
	rmmovl %edi,12(%ecx)
	andl %edi,%edi
	jle l2
	iaddl $1,%eax
	
l2:
	mrmovl 8(%ebx),%edi
	rmmovl %edi,8(%ecx)
	andl %edi,%edi
	jle l1
	iaddl $1,%eax
	
l1:
	mrmovl 4(%ebx),%edi
	rmmovl %edi,4(%ecx)
	andl %edi,%edi
	jle l0
	iaddl $1,%eax

l0:
	mrmovl (%ebx),%edi
	rmmovl %edi,(%ecx)
	andl %edi,%edi
	jle End_loop
	iaddl $1,%eax

End_loop:
	iaddl $64,%ebx
	iaddl $64,%ecx
	jmp Start
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi			#Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp,%esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long 2
	.long 3
	.long 4
	.long -5
	.long -6
	.long -7
	.long 8
	.long 9
	.long -10
	.long -11
	.long -12
	.long 13
	.long 14
	.long -15
	.long 16
	.long -17
	.long -18
	.long -19
	.long -20
	.long 21
	.long 22
	.long 23
	.long 24
	.long -25
	.long -26
	.long -27
	.long 28
	.long -29
	.long 30
	.long 31
	.long 32
	.long -33
	.long 34
	.long 35
	.long -36
	.long -37
	.long 38
	.long 39
	.long -40
	.long 41
	.long 42
	.long 43
	.long -44
	.long -45
	.long -46
	.long -47
	.long 48
	.long 49
	.long 50
	.long 51
	.long -52
	.long 53
	.long -54
	.long -55
	.long 56
	.long -57
	.long -58
	.long -59
	.long 60
	.long -61
	.long -62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
