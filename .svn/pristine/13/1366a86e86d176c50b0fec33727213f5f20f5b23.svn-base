#include "cachelab.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define HIT 1
#define MISS 0

/* global variable */

int hit_counter=0;
int miss_counter=0;


/* cache_line */

struct cache_line
{
	int valid;
    unsigned long long tag;
    unsigned int time;
};

/* functions */
struct cache_line* cache_line_init();
void cache_line_free(struct cache_line* _this);
int cache_line_check_tag(struct cache_line* _this, unsigned long long address, unsigned long long tag_mask);
int cache_line_check_valid(struct cache_line* _this);
void cache_line_modify(struct cache_line* _this, unsigned long long address, unsigned long long tag_mask, unsigned int time);
void cache_line_visit(struct cache_line* _this, unsigned int time);

struct cache_line* cache_line_init() {
    struct cache_line* tmp=malloc(sizeof(struct cache_line));
    tmp->valid=0;
    tmp->time=0;
    
    return tmp;
}

void cache_line_free(struct cache_line* _this) {
    free(_this);
}

int cache_line_check_tag(struct cache_line* _this, unsigned long long address, unsigned long long tag_mask) {
    if (_this->tag==(address & tag_mask)) {
        return 1 && _this->valid;
    }
    else return 0;
}

int cache_line_check_valid(struct cache_line* _this) {
    return _this->valid;
}

void cache_line_modify(struct cache_line* _this, unsigned long long address, unsigned long long tag_mask, unsigned int time) {
    _this->tag=address&tag_mask;
    _this->time=time;
    _this->valid=1;
}

void cache_line_visit(struct cache_line* _this, unsigned int time) {
    _this->time=time;
}

/* --------------------------------------- */

/* cache_set */

struct cache_set {
	int size;
	struct cache_line** line;
    unsigned int curr_time;
};
struct cache_set* cache_set_init(int size);
void cache_set_free(struct cache_set* _this);
void cache_set_visit(struct cache_set* _this, unsigned long long address, unsigned long long tag_mask);
int cache_set_check(struct cache_set* _this, unsigned long long address, unsigned long long tag_mask);
int cache_set_find_least_use(struct cache_set* _this);
int cache_set_find_invalid(struct cache_set* _this);


struct cache_set* cache_set_init(int size) {
    int i;
    struct cache_set* tmp=malloc(sizeof(struct cache_set));
    
    tmp->size=size;
    tmp->curr_time=0;
    tmp->line=malloc(sizeof(struct cache_line*)*size);
    for (i=0; i<size; i++) {
        tmp->line[i]=cache_line_init();
    }
    
    return tmp;
}

void cache_set_free(struct cache_set* _this) {
    int i;
    
    for (i=0; i<_this->size; i++) {
        cache_line_free(_this->line[i]);
    }
    free(_this->line);
    free(_this);
}

int cache_set_find_least_use(struct cache_set* _this) {
    int i,least=0,least_time=_this->line[0]->time;
    
    if (_this->size<=0) return -2;
    
    for (i=1; i<_this->size; i++) {
        if (_this->line[i]->time<least_time) {
            least_time=_this->line[i]->time;
            least=i;
        }
    }
    
    return least;
}

int cache_set_find_invalid(struct cache_set* _this) {
    for (int i=0; i<_this->size; i++) {
        if (cache_line_check_valid(_this->line[i])) return i;
    }
    return -1;
}

int cache_set_check(struct cache_set* _this, unsigned long long address, unsigned long long tag_mask) {
    int i;
    
    for (i=0; i<_this->size; i++) {
        if (cache_line_check_tag(_this->line[i], address, tag_mask)) {
            return i;
        }
    }
    return -1;
}

void cache_set_visit(struct cache_set* _this, unsigned long long address, unsigned long long tag_mask) {
    int least_used_line, invalid_line, exist_line;
    
    _this->curr_time++;
    
    //判断 tag 是否在里面，如果在里面，直接 hit
    exist_line=cache_set_check(_this,address,tag_mask);
    if (exist_line>=0) {
        cache_line_visit(_this->line[exist_line], _this->curr_time);
        hit_counter++;
        return;
    }
    
    invalid_line=cache_set_find_invalid(_this);
    if (invalid_line>=0) {
        cache_line_modify(_this->line[invalid_line], address, tag_mask, _this->curr_time);
        miss_counter++;
        return;
    }
    
    least_used_line=cache_set_find_least_use(_this);
    cache_line_modify(_this->line[least_used_line], address, tag_mask, _this->curr_time);
    miss_counter++;
    return;
}

/* cache */

struct cache
{
    int set_size;
    unsigned long long block_mask,tag_mask,set_mask;
    
	struct cache_set** set;
};

struct cache* cache_init(int set_index_bits, int associativity, int block_bits);
void cache_free(struct cache* _this);


struct cache* cache_init(int set_index_bits, int associativity, int block_bits) {
    int i;
    
    struct cache* tmp = malloc(sizeof(struct cache));
    tmp->set_size=(((unsigned long long)1)<<set_index_bits);
    tmp->block_mask=(((unsigned long long)1)<<block_bits)-1;
    tmp->set_mask=((((unsigned long long)1)<<(tmp->set_mask+tmp->block_mask))-1)^tmp->block_mask;
    tmp->tag_mask=((unsigned long long)(-1))^(tmp->set_mask&tmp->block_mask);
    
    tmp->set=malloc(sizeof(struct cache_set*)*tmp->set_size);
    for (i=0; i<tmp->set_size; i++) {
        tmp->set[i]=cache_set_init(associativity);
    }
    
    return tmp;
}

void cache_free(struct cache* _this) {
    int i;
    
    for (i=0; i<_this->set_size; i++) {
        cache_set_free(_this->set[i]);
    }
    free(_this->set);
    free(_this);
}




int main(int argc, char* argv[])
{
    printSummary(0, 0, 0);
    return 0;
}




















